{"version":3,"sources":["components/BookCard.js","components/BookList.js","components/CartSummary.js","components/CartDetails.js","App.js","serviceWorker.js","index.js"],"names":["BookCard","data","addToCart","useContext","CartContext","Card","Image","src","image","wrapped","ui","style","width","Content","Header","title","Meta","className","year","Description","extra","Button","animated","onClick","hidden","visible","Icon","name","BookList","useState","books","setBooks","useEffect","axios","get","then","res","as","length","Grid","columns","doubling","stackable","map","b","Column","key","id","Segment","CartSummary","countCartArticles","CartDetails","cart","removeFromCart","emptyCart","class","Table","celled","padded","Row","HeaderCell","singleLine","textAlign","Body","Object","keys","Cell","cursor","quantity","price","toFixed","createContext","App","setCart","nbArticles","setNbArticles","cartFromStorage","localStorage","getItem","JSON","parse","setItem","stringify","document","contextValue","item","console","log","total","window","confirm","Provider","value","Container","Menu","Item","to","size","path","component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.20e49a11.chunk.js","sourcesContent":["import React, { useContext } from \"react\";\r\n// puisque on importe cartContext pour pouvoir utiliser le panier depuis ce component\r\n// on importe le hook useContext\r\nimport { Card, Image, Button, Icon } from \"semantic-ui-react\";\r\nimport { CartContext } from \"../App\";\r\n\r\nexport default function BookCard({ data }) {\r\n  const { addToCart } = useContext(CartContext);\r\n  // const context = useContext(CartContext);\r\n  // context.addToCart;\r\n  return (\r\n    <Card>\r\n      <Image src={data.image} wrapped ui={false} style={{ width: 120 }} />\r\n      <Card.Content>\r\n        <Card.Header>{data.title}</Card.Header>\r\n        <Card.Meta>\r\n          <span className=\"date\">publié en {data.year}</span>\r\n        </Card.Meta>\r\n        <Card.Description></Card.Description>\r\n      </Card.Content>\r\n      <Card.Content extra>\r\n        {/* <button onClick={() => addToCart({ id: data.id, quantity: 1 })}>\r\n          + ajouter au caddie\r\n        </button> */}\r\n        {/* <button onClick={() => addToCart(data)}>+ ajouter au caddie</button> */}\r\n        <Button animated='vertical' onClick={() => addToCart(data)}>\r\n          <Button.Content hidden>+</Button.Content>\r\n          <Button.Content visible>\r\n            <Icon name='shop' />\r\n          </Button.Content>\r\n        </Button>\r\n      </Card.Content>\r\n    </Card>\r\n  );\r\n}","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Book from \"./BookCard\";\n// sous forme de components fournis par semantic-ui, pour l'affichage en grid\nimport { Grid, Segment, Header } from \"semantic-ui-react\";\n\nexport default function BookList() {\n  const [books, setBooks] = useState([]);\n\n  useEffect(() => {\n    axios.get(\"http://localhost:3001/products\").then(res => {\n      const books = res.data;\n      setBooks(books);\n    });\n  }, []);\n  return (\n    <>\n     <Header as='h2'>Livres en vente</Header>\n      {books.length === 0 ? (\n        <div>loading...</div>\n      ) : (\n        // <pre>\n        //   <code>{JSON.stringify(books, null, 4)}</code>\n        // </pre>\n\n        // puisque on va utiliser l'affichage en grid, on remplace les lignes suivantes\n              //   <div>\n              //   {books.map(b => (\n              //     <Book data={b} key={b.id} />\n              //   ))}\n              // </div>\n\n              // grid basée sur https://github.com/Semantic-Org/Semantic-UI-React/blob/master/docs/src/layouts/ResponsiveLayout.js\n              <Grid columns={4} doubling stackable>\n              {books.map(b => (\n                <Grid.Column key={b.id}>\n                  <Segment>\n                    <Book data={b} />\n                  </Segment>\n                </Grid.Column>\n              ))}\n            </Grid>\n      )}\n    </>\n  );\n}\n","import React, { useContext } from \"react\";\r\nimport { CartContext } from \"../App\";\r\n\r\nexport default function CartSummary() {\r\n  const { countCartArticles } = useContext(CartContext);\r\n  return (\r\n    <>\r\n      <span>Caddie ({countCartArticles()})</span>\r\n    </>\r\n  );\r\n}","import React, { useContext } from \"react\";\r\nimport { CartContext } from \"../App\";\r\nimport { Table, Icon, Button } from \"semantic-ui-react\";\r\n\r\nexport default function CartDetails() {\r\n    // à récupérer depuis le context\r\n    const { cart, addToCart, removeFromCart, emptyCart } = useContext(CartContext);\r\n    return (\r\n        <>\r\n            {/* <div>{JSON.stringify(cart, null, 4)}</div> */}\r\n\r\n            <button onClick={emptyCart} class=\"ui button\">vider le caddie</button>\r\n            <Table celled padded>\r\n                <Table.Header>\r\n                    <Table.Row>\r\n                        <Table.HeaderCell singleLine textAlign=\"center\">\r\n                            Quantité\r\n            </Table.HeaderCell>\r\n                        <Table.HeaderCell>Titre</Table.HeaderCell>\r\n                        <Table.HeaderCell textAlign=\"right\">Prix unitaire</Table.HeaderCell>\r\n                        <Table.HeaderCell textAlign=\"right\">Prix total</Table.HeaderCell>\r\n                    </Table.Row>\r\n                </Table.Header>\r\n\r\n                <Table.Body>\r\n                    {Object.keys(cart).map(key => (\r\n                        //   ne pas oublier d'ajouter une clée unique pour chaque row\r\n                        <Table.Row key={cart[key].id}>\r\n                            <Table.Cell>\r\n                                {/* <Header as=\"h2\" textAlign=\"center\">\r\n                                    <button onClick={() => removeFromCart(cart[key])}>-</button>{\" \"}\r\n                                    <button onClick={() => addToCart(cart[key])}>+</button>{\" \"}\r\n                                    {cart[key].quantity}\r\n                                </Header> */}\r\n                                <Icon\r\n                                    name=\"minus square outline\"\r\n                                    onClick={() => removeFromCart(cart[key])}\r\n                                    style={{ cursor: \"pointer\" }}\r\n                                />\r\n                                {cart[key].quantity}{\" \"}\r\n                                <Icon\r\n                                    name=\"plus square outline\"\r\n                                    onClick={() => addToCart(cart[key])}\r\n                                    style={{ cursor: \"pointer\" }}\r\n                                />\r\n                            </Table.Cell>\r\n                            <Table.Cell singleLine>{cart[key].title}</Table.Cell>\r\n                            <Table.Cell textAlign=\"right\">{cart[key].price} €</Table.Cell>\r\n                            <Table.Cell textAlign=\"right\">\r\n                                {/* {cart[key].quantity * cart[key].price} € */}\r\n                                {/* pour arrondir à 2 chiffres après la virgule. js natif */}\r\n                                {(cart[key].quantity * cart[key].price).toFixed(2)} €\r\n              </Table.Cell>\r\n                        </Table.Row>\r\n                    ))}\r\n                </Table.Body>\r\n            </Table>\r\n\r\n        </>\r\n    );\r\n}","import React, { useState, createContext, useEffect } from \"react\";\nimport \"./App.css\";\nimport BookList from \"./components/BookList\";\nimport CartSummary from \"./components/CartSummary\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport CartDetails from \"./components/CartDetails\";\n\n// pour le menu et son container\nimport { Container, Menu, Icon } from \"semantic-ui-react\";\n\nexport const CartContext = createContext();\n\n// pour localStorage \nconst CART_KEY = \"react-shop\";\n\nfunction App() {\n\n  const [cart, setCart] = useState({});\n  // morceau d'état dédié au comptage des articles. \n  // qui n'est autre qu'un compteur, dont la valeur par défaut est donc 0\n  const [nbArticles, setNbArticles] = useState(0);\n\n  // on souhaite que useEffect ne s'execute que lorsque notre component est monté\n  // pour ça, on utilise en deuxième argument un tableau vide []\n  useEffect(() => {\n    const cartFromStorage = localStorage.getItem(CART_KEY);\n    if (cartFromStorage !== null) {\n      setCart(JSON.parse(cartFromStorage));\n    }\n  }, []);\n\n  // le deuxième useEffect permet d'insérer du contenu dans localStorage\n  useEffect(() => {\n    // on ne peut mettre que des strings dans localStorage\n    localStorage.setItem(CART_KEY, JSON.stringify(cart));\n    // document.title = `caddie(${Object.keys(cart).length})`;\n  //   document.title = `caddie(${countCartArticles()})`;\n  // }, [cart, countCartArticles]);\n  // au lieu d'utiliser une fonction dédiée, on va utiliser un morceau d'état dédié au comptage des articles\n  document.title = `caddie(${nbArticles})`;\n}, [cart, nbArticles]);\n\n\n\n  function addToCart(item) {\n    console.log(\"item\", item);\n    if (!cart[item.id]) {\n      cart[item.id] = item;\n      cart[item.id].quantity = 1;\n    } else {\n      cart[item.id].quantity += 1;\n    }\n    setCart({ ...cart });\n  }\n\n  function countCartArticles() {\n    let total = 0;\n    Object.keys(cart).map(key => (total += cart[key].quantity));\n    setNbArticles(total);\n    return total;\n  }\n\n  function removeFromCart(item) {\n    if (cart[item.id].quantity !== 1) {\n      cart[item.id].quantity = cart[item.id].quantity - 1;\n    } else {\n      delete cart[item.id];\n    }\n    setCart({ ...cart });\n    console.log(\"cart\", cart);\n  }\n\n  function emptyCart() {\n    const response = window.confirm(\n      \"Etes-vous vous sûr de vouloir vider le caddie ? \"\n    );\n    if (response) {\n      setCart({});\n    }\n  }\n\n  // const contextValue = { cart, addToCart, countCartArticles:countCartArticles };\n  const contextValue = { cart, addToCart, countCartArticles, removeFromCart, emptyCart };\n\n\n  return (\n    <>\n      <Router>\n        <CartContext.Provider value={contextValue}>\n        <Container>\n            <Menu stackable>\n              <Menu.Item>\n                <Link to=\"/\">Campus Shop</Link>\n              </Menu.Item>\n              <Menu.Item>\n                <Link to=\"/cart\">\n                  <Icon name=\"cart\" size=\"small\" /> <CartSummary />\n                </Link>\n              </Menu.Item>\n            </Menu>\n          <Switch>\n            <Route path=\"/cart\" component={CartDetails} />\n            <Route path=\"/\" component={BookList} />\n          </Switch>\n          </Container>\n        </CartContext.Provider>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"semantic-ui-css/semantic.min.css\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}